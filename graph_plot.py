import numpy as np
import matplotlib.pyplot as plt

# mse_loss = np.asarray([0.0, 0.0001478, 0.0007683, 0.0009607,
#                        0.0010790, 0.0013952, 0.0018208])

# laplace_gender = np.asarray([0.972, 0.972, 0.970, 0.969, 0.969, 0.969, 0.968])

# laplace_smile = np.asarray([0.977, 0.977, 0.976, 0.976, 0.976, 0.976, 0.975])

# uniform_gender = np.asarray([0.972, 0.972, 0.970, 0.970, 0.970, 0.970, 0.970])

# uniform_smile = np.asarray([0.977, 0.976, 0.976, 0.976, 0.976, 0.976, 0.976])

# GAP_gender = np.asarray([0.972, 0.628, 0.547, 0.521, 0.518, 0.519, 0.503])

# GAP_smile = np.asarray([0.977, 0.891, 0.862, 0.811, 0.809, 0.775, 0.724])


# plt.figure()

# plt.title("GENKI Smile Accuracy against Distortion (MSE)")
# plt.gca().set_xlim([0.00, 0.002])
# plt.gca().set_ylim([0.5, 1])
# plt.xlabel("Distortion: MSE per pixel")
# plt.ylabel("Smile Classification Accuracy")
# plt.plot(mse_loss, laplace_smile, "ro--")
# plt.plot(mse_loss, uniform_smile, "bx--")
# plt.plot(mse_loss, GAP_smile, "yD-")
# plt.legend(["Adding Independent Laplace Noise", "Adding Independent Uniform Noise", "Generative Adversarial Pivacy"])
# plt.show()
# # plt.savefig("gender_acc.jpg")
# plt.close()

epoch_number = np.asarray(
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
# # smile classifier
# val_loss = np.asarray([3.5, 0.42863996496254747, 0.37712120434099977, 0.36370589855042373, 0.3712410121648149, 0.35744673132219096, 0.35754078144038265, 0.35740474095060065, 0.3704192574051293, 0.356826739131727,
#                        0.3645627363161607, 0.3708949640223926, 0.3691427315669981, 0.37148583032698795, 0.3569720496254211, 0.40096512610431423, 0.388961527581242, 0.3709517476487566, 0.3834998412904414, 0.36748669254170224])
# val_acc = np.asarray([0.5, 0.8149857954545454, 0.8583096590909091, 0.859375, 0.8487215909090909, 0.8540482954545454, 0.8618607954545454, 0.8767755681818182, 0.8703835227272727, 0.8817471590909091,
#                       0.8650568181818182, 0.8781960227272727, 0.8781960227272727, 0.8753551136363636, 0.8742897727272727, 0.8575994318181818, 0.8675426136363636, 0.87109375, 0.8781960227272727, 0.8])
# train_loss = np.asarray([5, 0.55295280425281, 0.20747580723773526, 0.1353480787657049, 0.09941257060822194, 0.07394867150061525, 0.059919891720567504, 0.05003350315221886, 0.04963411984288494, 0.03848846713004144,
#                          0.03603942112701103, 0.03375726850991062, 0.03094497789933898, 0.028237900307390654, 0.027413585524341734, 0.026992633239115556, 0.0255293616123436, 0.02313696923136048, 0.023098419677395312, 0.0022111323461520057])
# train_acc = np.asarray([0.5, 0.7567276641550054, 0.9185504126300682, 0.9619662719770362, 0.9815083393763597, 0.9921062073914604,
#                         0.995335486185863, 0.9992823824901328, 0.9974619289556217, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9996411912450663, 1.0, 1.0, 1.0])

# smile classifier
val_loss = np.asarray([3.5, 0.5404550070789728, 0.4654403019019149, 0.4043967816978693, 0.4385887353935025, 0.4325496012514288, 0.3910711361095309, 0.3920692491599105, 0.44156326014887204, 0.39859506801109423,
                       0.4194963157854297, 0.3997387301854112, 0.423103390769525, 0.4464175926352089, 0.47409747456285084, 0.4715492920950055, 0.4381929618221792, 0.466578657315536, 0.44102497678250074, 0.44048716009340505])
val_acc = np.asarray([0.5, 0.7826704545454546, 0.8071732954545454, 0.8416193181818182, 0.8323863636363636, 0.8359375, 0.8565340909090909, 0.8586647727272727, 0.83984375, 0.8483664772727273,
                      0.8519176136363636, 0.8625710227272727, 0.8558238636363636, 0.8508522727272727, 0.8448153409090909, 0.8526278409090909, 0.8515625, 0.8508522727272727, 0.8565340909090909, 0.8604403409090909])
train_loss = np.asarray([5.0, 0.5033630191167708, 0.21103440166845688, 0.11943029930964139, 0.07609854643371569, 0.059960546130384644, 0.0489042466997587, 0.04589485912007331, 0.035144327481245546, 0.0321192629093984,
                         0.03097358292786075, 0.028058762909294772, 0.02461329577032879, 0.023809059279438497, 0.022444100703631075, 0.023142181758304882, 0.021316260701245225, 0.02203787224862496, 0.01975634796087101, 0.01868083433398708])
train_acc = np.asarray([0.5, 0.7804090419806243, 0.9228561177106583, 0.9691424470757086, 0.990572878897752, 0.9956942949407965,
                        0.9974883387154646, 0.9985647649802655, 0.9996374184191443, 0.9996411912450663, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
plt.gca().set_ylim([0.5, 1])
plt.gca().set_xlim([0, 20])
plt.plot(epoch_number, train_acc)
plt.plot(epoch_number, val_acc)
plt.title("Gender Classifier accuracy")
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'])
plt.show()
# plt.savefig("Classifier_smile_accuracy.png")
plt.close()

plt.gca().set_ylim([0, 0.7])
plt.gca().set_xlim([0, 20])
plt.plot(epoch_number, train_loss)
plt.plot(epoch_number, val_loss)
plt.title('Gender Classifier loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'])
plt.show()
# plt.savefig("Classifier_loss.png")
plt.close()
